{"version":3,"file":"static/js/387.cd24cc8c.chunk.js","mappings":"mPAEaA,EAAWC,EAAAA,GAAAA,GAAH,4EAMRC,EAAWD,EAAAA,GAAAA,GAAH,oLAURE,EAAWF,EAAAA,GAAAA,IAAH,yI,2BCqCrB,EAhDa,WACX,OAAkCG,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAiBH,GAASI,MAAK,SAAAC,GAAI,OAAIR,EAAaQ,EAAjB,GAGpC,CAFC,SACAN,GAAS,EACV,CACF,GAAE,CAACC,KAGF,8BACGF,GACC,SAACQ,EAAA,EAAD,CAAcC,QAAQ,6BAEtB,8BACGX,EAAUY,OAAS,GAClB,SAACjB,EAAD,UACGK,EAAUa,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC7C,OACE,UAACpB,EAAD,YACE,gBACEqB,IACEH,EAAY,0CAC2BA,GACnCI,EAENC,IAAKJ,KAEP,UAAClB,EAAD,YACE,wBAAKkB,KACL,uCAAeC,UAXJH,EAelB,OAGH,+CAMX,C,mCChDD,IAJqB,SAAC,GAAiB,IAAfH,EAAc,EAAdA,QACtB,OAAO,wBAAKA,GACb,C,+LCFKU,EAAW,6BACXC,EAAM,mCAECC,EAAiB,mCAAG,qGACRC,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,yCACkBC,IAFf,cACzBG,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,qDAOjBC,EAAY,mCAAG,WAAMxB,GAAN,wFACHoB,EAAAA,EAAAA,GAAM,GAAD,OAAIH,EAAJ,oBAAwBjB,EAAxB,oBAA2CkB,IAD7C,cACpBG,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZnB,EAAgB,mCAAG,WAAMH,GAAN,wFACPoB,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,oBACHjB,EADG,4BACwBkB,IAFtB,cACxBG,EADwB,yBAKvBA,EAASC,KAAKjB,MALS,2CAAH,sDAQhBoB,EAAe,mCAAG,WAAMzB,GAAN,wFACNoB,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,oBACHjB,EADG,4BACwBkB,IAFvB,cACvBG,EADuB,yBAItBA,EAASC,KAAKC,SAJQ,2CAAH,sDAOfG,EAAe,mCAAG,WAAMC,GAAN,wFACNP,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,mCACYC,EADZ,kBACyBS,IAFxB,cACvBN,EADuB,yBAKtBA,EAASC,KAAKC,SALQ,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Notification/Notification.jsx","servises/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListCast = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nexport const ItemCast = styled.li`\n  min-height: 150px;\n  width: 150px;\n  background-color: grey;\n  border-radius: 15px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ItemText = styled.div`\n  height: 100%;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 14px;\n`;\n","import { getMovie小astById } from '../../servises/API';\nimport { useEffect, useState } from 'react';\nimport DefaultImage from '../../images/notFound.png';\nimport { ListCast, ItemCast, ItemText } from './Cast.styled';\nimport { useParams } from 'react-router-dom';\nimport Notification from 'components/Notification/Notification';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      getMovie小astById(movieId).then(cast => setMovieCast(cast));\n    } catch {\n      setError(true);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {error ? (\n        <Notification message=\"Something went wrong...\" />\n      ) : (\n        <>\n          {movieCast.length > 0 ? (\n            <ListCast>\n              {movieCast.map(({ cast_id, profile_path, name, character }) => {\n                return (\n                  <ItemCast key={cast_id}>\n                    <img\n                      src={\n                        profile_path\n                          ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                          : DefaultImage\n                      }\n                      alt={name}\n                    />\n                    <ItemText>\n                      <h3>{name}</h3>\n                      <p>Character: {character}</p>\n                    </ItemText>\n                  </ItemCast>\n                );\n              })}\n            </ListCast>\n          ) : (\n            <p>Actors not found</p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\nexport default Cast;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst KEY = '520d2e464644c0f1097ff46b301f91b7';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios(\n    `${BASE_URL}/3/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios(`${BASE_URL}/3/movie/${movieId}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const getMovie小astById = async movieId => {\n  const response = await axios(\n    `${BASE_URL}/3/movie/${movieId}/credits?api_key=${KEY}`\n  );\n\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios(\n    `${BASE_URL}/3/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getSearchMovies = async searchQuery => {\n  const response = await axios(\n    `${BASE_URL}/3/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n\n  return response.data.results;\n};\n"],"names":["ListCast","styled","ItemCast","ItemText","useState","movieCast","setMovieCast","error","setError","movieId","useParams","useEffect","getMovie小astById","then","cast","Notification","message","length","map","cast_id","profile_path","name","character","src","DefaultImage","alt","BASE_URL","KEY","getTrendingMovies","axios","response","data","results","getMovieById","getMovieReviews","getSearchMovies","searchQuery"],"sourceRoot":""}