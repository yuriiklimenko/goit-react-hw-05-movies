{"version":3,"file":"static/js/310.b33515e1.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.Styled.js","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","servises/API.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px 8px;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc((100% - 32px) / 4);\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`;\n\nexport const LinkStyled = styled(NavLink)`\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.1);\n    color: orangered;\n  }\n`;\n\nexport const MoviesName = styled.h3`\n  padding: 12px 4px;\n  font-size: 16px;\n`;\n\nexport const Img = styled.img`\n  object-fit: cover;\n  height: 300px;\n`;\n","import PropTypes from 'prop-types';\nimport DefaultImage from '../../images/notFound.png';\nimport { useLocation } from 'react-router-dom';\n\nimport { Item, List, MoviesName, Img, LinkStyled } from './MoviesList.Styled';\n\nconst MoviesList = ({ movieList }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movieList &&\n        movieList.map(({ id, title, poster_path }) => (\n          <Item key={id}>\n            <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n              <Img\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n                    : DefaultImage\n                }\n                alt={title}\n              />\n              <MoviesName>{title}</MoviesName>\n            </LinkStyled>\n          </Item>\n        ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","import styled from 'styled-components';\nimport { AiOutlineSearch } from 'react-icons/ai';\n\nexport const SearchContainer = styled.div`\n  margin-bottom: 30px;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  height: 35px;\n  justify-content: center;\n  background-color: #fff;\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 300px;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding: 5px;\n  border-radius: 4px\n  background-color: grey;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 30px;\n  height: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n`;\n\nexport const BtnIcon = styled(AiOutlineSearch)`\n  width: 24px;\n  height: 24px;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: orangered;\n  }\n`;\n","import { useLocation, useSearchParams } from 'react-router-dom';\nimport { React, useState, useEffect } from 'react';\nimport { getSearchMovies } from '../../servises/API';\nimport { SearchContainer, Form, Input, Button, BtnIcon } from './Movies.styled';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const location = useLocation();\n\n  const [searchMovie, setSearchMovie] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams({});\n\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    getSearchMovies(searchQuery).then(movies => setSearchMovie(movies));\n  }, [searchQuery]);\n\n  const showMovies = e => {\n    e.preventDefault();\n\n    const query = e.target.elements.input.value;\n    if (!query) {\n      alert('Enter movie name');\n      return;\n    }\n\n    setSearchParams({ query });\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <SearchContainer>\n        <Form onSubmit={showMovies}>\n          <Input type=\"text\" name=\"input\" placeholder=\"Search movies\" />\n          <Button type=\"submit\">\n            <BtnIcon />\n          </Button>\n        </Form>\n      </SearchContainer>\n\n      <MoviesList movieList={searchMovie} location={location} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst KEY = '520d2e464644c0f1097ff46b301f91b7';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios(\n    `${BASE_URL}/3/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios(`${BASE_URL}/3/movie/${movieId}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const getMovieСastById = async movieId => {\n  const response = await axios(\n    `${BASE_URL}/3/movie/${movieId}/credits?api_key=${KEY}`\n  );\n\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios(\n    `${BASE_URL}/3/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getSearchMovies = async searchQuery => {\n  const response = await axios(\n    `${BASE_URL}/3/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n\n  return response.data.results;\n};\n"],"names":["List","styled","Item","LinkStyled","NavLink","MoviesName","Img","movieList","location","useLocation","map","id","title","poster_path","to","state","from","src","DefaultImage","alt","SearchContainer","Form","Input","Button","BtnIcon","AiOutlineSearch","useState","searchMovie","setSearchMovie","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","getSearchMovies","then","movies","onSubmit","e","preventDefault","query","target","elements","input","value","reset","alert","type","name","placeholder","MoviesList","BASE_URL","KEY","getTrendingMovies","axios","response","data","results","getMovieById","movieId","getMovieСastById","cast","getMovieReviews"],"sourceRoot":""}