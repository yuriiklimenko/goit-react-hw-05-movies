{"version":3,"file":"static/js/783.b84047f1.chunk.js","mappings":"gOAGaA,EAAOC,EAAAA,GAAAA,GAAH,4GAOJC,EAAOD,EAAAA,GAAAA,GAAH,oIAOJE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,0JAQVI,EAAaJ,EAAAA,GAAAA,GAAH,kEAKVK,EAAML,EAAAA,GAAAA,IAAH,gE,SCChB,EAzBmB,SAAC,GAAmB,IAAjBM,EAAgB,EAAhBA,UACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACT,EAAD,UACGO,GACCA,EAAUG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,KAA3B,OACZ,SAACZ,EAAD,WACE,UAACC,EAAD,CAAYY,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMT,GAAhD,WACE,SAACF,EAAD,CACEY,IACEL,EAAW,0CAC4BA,GACnCM,EAENC,IAAKR,KAEP,SAACP,EAAD,UAAaO,GAASE,QAVfH,EADC,KAiBrB,C,mCCvBD,IAJqB,SAAC,GAAiB,IAAfU,EAAc,EAAdA,QACtB,OAAO,wBAAKA,GACb,C,iICFYC,EAAYrB,EAAAA,GAAAA,IAAH,qFAMTsB,EAAQtB,EAAAA,GAAAA,GAAH,wE,kBCwBlB,EA1Ba,WACX,OAA4CuB,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,MAAoBC,MAAK,SAAAC,GAAM,OAAIN,EAAkBM,EAAtB,GAGhC,CAFC,SACAJ,GAAS,EACV,CACF,GAAE,KAGD,SAACN,EAAD,UACGK,GACC,SAACM,EAAA,EAAD,CAAcZ,QAAQ,6BAEtB,iCACE,SAACE,EAAD,8BACA,SAACW,EAAA,EAAD,CAAY3B,UAAWkB,QAKhC,C,+LC5BKU,EAAW,6BACXC,EAAM,mCAECN,EAAiB,mCAAG,qGACRO,EAAAA,EAAAA,GAAM,GAAD,OACvBF,EADuB,yCACkBC,IAFf,cACzBE,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,qDAOjBC,EAAY,mCAAG,WAAMC,GAAN,wFACHL,EAAAA,EAAAA,GAAM,GAAD,OAAIF,EAAJ,oBAAwBO,EAAxB,oBAA2CN,IAD7C,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZI,EAAgB,mCAAG,WAAMD,GAAN,wFACPL,EAAAA,EAAAA,GAAM,GAAD,OACvBF,EADuB,oBACHO,EADG,4BACwBN,IAFtB,cACxBE,EADwB,yBAKvBA,EAASC,KAAKK,MALS,2CAAH,sDAQhBC,EAAe,mCAAG,WAAMH,GAAN,wFACNL,EAAAA,EAAAA,GAAM,GAAD,OACvBF,EADuB,oBACHO,EADG,4BACwBN,IAFvB,cACvBE,EADuB,yBAItBA,EAASC,KAAKC,SAJQ,2CAAH,sDAOfM,EAAe,mCAAG,WAAMC,GAAN,wFACNV,EAAAA,EAAAA,GAAM,GAAD,OACvBF,EADuB,mCACYC,EADZ,kBACyBW,IAFxB,cACvBT,EADuB,yBAKtBA,EAASC,KAAKC,SALQ,2CAAH,qD","sources":["components/MoviesList/MoviesList.Styled.js","components/MoviesList/MoviesList.jsx","components/Notification/Notification.jsx","pages/Home/Home.Styled.js","pages/Home/Home.jsx","servises/API.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px 8px;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc((100% - 32px) / 4);\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`;\n\nexport const LinkStyled = styled(NavLink)`\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.1);\n    color: orangered;\n  }\n`;\n\nexport const MoviesName = styled.h3`\n  padding: 12px 4px;\n  font-size: 16px;\n`;\n\nexport const Img = styled.img`\n  object-fit: cover;\n  height: 300px;\n`;\n","import PropTypes from 'prop-types';\nimport DefaultImage from '../../images/notFound.png';\nimport { useLocation } from 'react-router-dom';\n\nimport { Item, List, MoviesName, Img, LinkStyled } from './MoviesList.Styled';\n\nconst MoviesList = ({ movieList }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movieList &&\n        movieList.map(({ id, title, poster_path, name }) => (\n          <Item key={id}>\n            <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n              <Img\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n                    : DefaultImage\n                }\n                alt={title}\n              />\n              <MoviesName>{title || name}</MoviesName>\n            </LinkStyled>\n          </Item>\n        ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;s\n  padding: 0 16px;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n  margin-bottom: 30pxs;\n`;\n","import { getTrendingMovies } from '../../servises/API';\nimport { useState, useEffect } from 'react';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Container, Title } from './Home.Styled';\nimport Notification from 'components/Notification/Notification';\n\nconst Home = () => {\n  const [TrendingMovies, setTrendingMovies] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    try {\n      getTrendingMovies().then(movies => setTrendingMovies(movies));\n    } catch {\n      setError(true);\n    }\n  }, []);\n\n  return (\n    <Container>\n      {error ? (\n        <Notification message=\"Something went wrong...\" />\n      ) : (\n        <>\n          <Title>Trending today</Title>\n          <MoviesList movieList={TrendingMovies} />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst KEY = '520d2e464644c0f1097ff46b301f91b7';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios(\n    `${BASE_URL}/3/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios(`${BASE_URL}/3/movie/${movieId}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const getMovieСastById = async movieId => {\n  const response = await axios(\n    `${BASE_URL}/3/movie/${movieId}/credits?api_key=${KEY}`\n  );\n\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios(\n    `${BASE_URL}/3/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getSearchMovies = async searchQuery => {\n  const response = await axios(\n    `${BASE_URL}/3/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n\n  return response.data.results;\n};\n"],"names":["List","styled","Item","LinkStyled","NavLink","MoviesName","Img","movieList","location","useLocation","map","id","title","poster_path","name","to","state","from","src","DefaultImage","alt","message","Container","Title","useState","TrendingMovies","setTrendingMovies","error","setError","useEffect","getTrendingMovies","then","movies","Notification","MoviesList","BASE_URL","KEY","axios","response","data","results","getMovieById","movieId","getMovieСastById","cast","getMovieReviews","getSearchMovies","searchQuery"],"sourceRoot":""}